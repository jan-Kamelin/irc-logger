// Generated by CoffeeScript 1.10.0
var channels, colors, net, port, ref, register, sendLog, sendMsg, server, serverName, user,
  slice = [].slice;

net = require('net');

colors = require('colors');

ref = require('config'), serverName = ref.serverName, port = ref.port, user = ref.user, channels = ref.channels;

channels = channels.join(',');

server = net.connect(port, serverName, function() {
  var welcome;
  server.setEncoding('utf8');
  welcome = 'Connected to: ' + serverName + ' on port ' + port;
  return console.log(welcome.cyan);
});

register = function() {
  sendMsg('NICK ' + user);
  return sendMsg('USER test 1 * :Hello!');
};

sendLog = function(chan, user, msg) {
  var logMsg;
  logMsg = "[" + chan + "] <" + user + "> " + msg;
  return console.log(logMsg);
};

sendMsg = function(msg) {
  return server.write(msg + "\r\n");
};

server.on('connect', register);

server.on('data', function(data) {
  var chan, code, i, len, message, messages, msg, parts, ref1, ref2, rest, results, text;
  message = data.toString();
  parts = message.split(' ');
  if (parts[0] === 'PING') {
    return sendMsg('PONG ' + parts[1]);
  }
  messages = message.split('\r\n');
  results = [];
  for (i = 0, len = messages.length; i < len; i++) {
    msg = messages[i];
    ref1 = msg.split(' '), user = ref1[0], code = ref1[1], chan = ref1[2], rest = 4 <= ref1.length ? slice.call(ref1, 3) : [];
    user = (ref2 = user.match(/\w+/)) != null ? ref2.toString() : void 0;
    text = rest.join(' ').slice(1);
    if (code != null) {
      switch (code) {
        case '433':
          user += '_';
          results.push(register());
          break;
        case '376':
          results.push(server.write("JOIN " + channels + " \r\n"));
          break;
        case 'PRIVMSG':
          results.push(sendLog(chan.green, user.cyan, text));
          break;
        case 'JOIN':
          results.push(sendLog(chan.green, user.green, 'has joined.'.green));
          break;
        case 'QUIT':
          results.push(sendLog(chan.red, user.red, 'has quit.'.red));
          break;
        default:
          results.push(void 0);
      }
    } else {
      results.push(void 0);
    }
  }
  return results;
});
